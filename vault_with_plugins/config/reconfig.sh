export VAULT_ADDR=http://127.0.0.1:8200
cd /etc/vault/config
if vault status >/dev/null; then
    echo "vault is unsealed"
else
    echo "vault status failed, attempting to unseal"
    sleep 2
    ./unseal.sh
    if ! vault status >/dev/null; then
	echo "vault unseal failed" >&2
	exit 1
    fi
fi
set -x

## run this to enable kerberos debugging
# SHA="`sha256sum plugins/vault-plugin-auth-kerberos.sh|awk '{print $1}'`"
# vault write sys/plugins/catalog/auth/kerberos sha256=$SHA command=vault-plugin-auth-kerberos.sh
# vault auth disable kerberos
# vault auth enable \
#     -passthrough-request-headers=Authorization \
#     -allowed-response-headers=www-authenticate kerberos
# base64 /etc/krb5.keytab >krb5.keytab.base64
# vault write auth/kerberos/config \
#     keytab=@krb5.keytab.base64 \
#     service_account="host/`uname -n`"
# rm -f krb5.keytab.base64
CREDKEY=preferred_username
# KERBPOLICYDOMAIN=
# case `domainname -d` in
#     fnal.gov)
# 	LDAPURL="ldaps://ldap.fnal.gov"
# 	LDAPDN="o=fnal"
# 	LDAPATTR="uid"
# 	KERBPOLICYDOMAIN=@fnal.gov
# 	CREDKEY=email
# 	;;
#     cern.ch)
# 	LDAPURL="ldaps://xldap.cern.ch"
# 	LDAPDN="OU=Users,OU=Organic Units,DC=cern,DC=ch"
# 	LDAPATTR="cn"
# 	;;
# esac
# vault write auth/kerberos/config/ldap \
#     url="$LDAPURL" \
#     userdn="$LDAPDN" \
#     userattr="$LDAPATTR" \
#     token_policies="kerberospolicy"

SHA="`sha256sum plugins/vault-plugin-secrets-oauthapp.sh|awk '{print $1}'`"
vault write sys/plugins/catalog/secret/oauthapp sha256=$SHA command=vault-plugin-secrets-oauthapp.sh
SHA="`sha256sum plugins/vault-plugin-auth-jwt.sh|awk '{print $1}'`"
vault write sys/plugins/catalog/auth/oidc sha256=$SHA command=vault-plugin-auth-jwt.sh

for POLICY in oidc kerberos; do
    rm -f ${POLICY}policy.hcl
    echo "/* Do not edit this file, generated from ${POLICY}policy.template */" >${POLICY}policy.hcl
done

OIDC_CLIENT_ID="$VAULT_OIDC_CLIENT_ID"
OIDC_CLIENT_SECRET="$VAULT_OIDC_CLIENT_SECRET"
OIDC_SERVER_URL="$VAULT_OIDC_SERVER_URL"
OIDC_SCOPES="$VAULT_OIDC_SCOPES"
CALLBACKMODE=device
TOKEN_ENDPOINT=token
REDIRECT_URIS="$VAULT_REDIRECT_URIS"

vault auth disable oidc
# ISSUERS="default wlcg cms cilogon"
ISSUERS="default"
for ISSUER in $ISSUERS; do 
    VPATH=oidc-$ISSUER
    vault auth disable $VPATH
    vault auth enable -path=$VPATH oidc
    REDIRECT_URIS="http://localhost:8200/v1/auth/$VPATH/oidc/callback"
 #    if [ "$ISSUER" = wlcg ]; then
	# CALLBACKMODE=direct
 #    elif [ "$ISSUER" = cms ]; then
	# OIDC_CLIENT_ID="xxx"
	# OIDC_CLIENT_SECRET="xxx"
	# OIDC_SERVER_URL="https://cms-auth.web.cern.ch/"
	# CALLBACKMODE=direct
 #    elif [ "$ISSUER" = cilogon ]; then
	# OIDC_CLIENT_ID="xxx"
	# OIDC_CLIENT_SECRET="xxx"
	# OIDC_SERVER_URL="https://test.cilogon.org"
	# OIDC_SCOPES="profile,email,org.cilogon.userinfo,storage.read:/,storage.create:/"  # adds openid by default
	# CREDKEY=eppn
	# TOKEN_ENDPOINT=oauth2/token
	# CALLBACKMODE=direct
 #    fi
    VPATH=auth/$VPATH
    vault write $VPATH/config \
	oidc_client_id="$OIDC_CLIENT_ID" \
	oidc_client_secret="$OIDC_CLIENT_SECRET" \
	default_role="default" \
	oidc_discovery_url="$OIDC_SERVER_URL" 

	# DELETE GROUPCLAIMS for simplicity on testing
    echo -n '{"claim_mappings": {"'$CREDKEY'" : "credkey"}, "oauth2_metadata": ["refresh_token"]}'| \
      vault write $VPATH/role/default - \
	role_type="oidc" \
	user_claim="$CREDKEY" \
	oidc_scopes="$OIDC_SCOPES" \
	policies=default,oidcpolicy,tokencreatepolicy \
	callback_mode=$CALLBACKMODE \
	poll_interval=3 \
        allowed_redirect_uris="$REDIRECT_URIS" \
	verbose_oidc_logging=true

    VPATH=secret/oauth-$ISSUER
    vault secrets disable $VPATH
    vault secrets enable -path=$VPATH oauthapp
    # echo -n '{"provider_options": {"auth_code_url": "'$OIDC_SERVER_URL/authorize'", "token_url": "'$OIDC_SERVER_URL/$TOKEN_ENDPOINT'"}}'| \

    echo -n '{"provider_options": {"discovery_url": "'$OIDC_SERVER_URL'", "auth_style": "in_header"}}'| \
      vault write $VPATH/config \
	provider="custom" - \
	client_id="$OIDC_CLIENT_ID" \
	client_secret="$OIDC_CLIENT_SECRET"

    for POLICY in oidc kerberos; do
	POLICYISSUER="$POLICY"
	if [ "$POLICY" = oidc ]; then
	    POLICYISSUER="$POLICY-$ISSUER"
	fi
	ACCESSOR="`vault read sys/auth -format=json|jq -r '.data."'$POLICYISSUER'/".accessor'`"
	sed -e "s,<vpath>,$VPATH," -e "s/<${POLICY}>/$ACCESSOR/" -e "s/@<domain>/$KERBPOLICYDOMAIN/" ${POLICY}policy.template >>${POLICY}policy.hcl
    done
done
for POLICY in oidc kerberos; do
    chmod a-w ${POLICY}policy.hcl
    vault policy write ${POLICY}policy ${POLICY}policy.hcl
done
echo "vault reconfiguration complete"

